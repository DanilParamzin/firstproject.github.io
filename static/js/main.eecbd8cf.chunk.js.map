{"version":3,"sources":["WeatherDisplay/WeatherDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherDisplay","state","weatherData","name","this","props","fetch","then","res","json","setState","weather","iconUrl","icon","main","src","alt","description","temp","Component","PLACES","App","activePlace","className","map","place","index","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAEqBA,E,4MACnBC,MAAQ,CACNC,YAAa,M,uDAGf,WAAqB,IAAD,OACZC,EAAOC,KAAKC,MAAMF,KAIxBG,MAHY,qDACVH,EACA,2EACSI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GACtC,EAAKC,SAAS,CAAER,YAAaO,S,oBAKjC,WACE,IAAMP,EAAcE,KAAKH,MAAMC,YAC/B,IAAKA,EAAa,OAAO,0CACzB,IAAMS,EAAUT,EAAYS,QAAQ,GAC9BC,EAAU,mCAAqCD,EAAQE,KAAO,OACpE,OACE,gCACE,+BACGF,EAAQG,KADX,OACqBZ,EAAYC,KAC/B,qBAAKY,IAAKH,EAASI,IAAKd,EAAYe,iBAEtC,uCAAUf,EAAYY,KAAKI,KAA3B,uB,GA3BoCC,aCEtCC,EAAS,CAAC,SAAU,WAAY,UAAW,QAAS,aAErCC,E,4MACnBpB,MAAQ,CACNqB,YAAa,G,4CAGf,WAAU,IAAD,OACDA,EAAclB,KAAKH,MAAMqB,YAC/B,OACE,sBAAKC,UAAU,OAAf,UAEGH,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAEEC,QAAS,WACP,EAAKjB,SAAS,CAAEY,YAAaI,KAHjC,SAKKD,GAJEC,MAQT,cAAC,EAAD,CAEEvB,KAAMiB,EAAOE,IADRA,U,GArBkBH,aCMlBS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eecbd8cf.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class WeatherDisplay extends Component {\r\n  state = {\r\n    weatherData: null\r\n  };\r\n  \r\n  componentDidMount() {\r\n    const name = this.props.name;\r\n    const URL = \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n      name +\r\n      \"&lang=&units=metric&appid=a97e1c4f1a6a3452bf3d6b4645a051f0&units=metric\";\r\n    fetch(URL).then(res => res.json()).then(json => {\r\n      this.setState({ weatherData: json });\r\n    });\r\n  }\r\n  \r\n  \r\n  render() {\r\n    const weatherData = this.state.weatherData;\r\n    if (!weatherData) return <div>Loading</div>;\r\n    const weather = weatherData.weather[0];\r\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\r\n    return (\r\n      <div>\r\n        <h1>\r\n          {weather.main} in {weatherData.name}\r\n          <img src={iconUrl} alt={weatherData.description} />\r\n        </h1>\r\n        <p>temp: {weatherData.main.temp}°С</p>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport WeatherDisplay from './WeatherDisplay/WeatherDisplay';\n\nconst PLACES = [\"Samara\", \"Tolyatti\", \"Saratov\", \"Kazan\", \"Krasnodar\"];\n\nexport default class App extends Component {\n  state = {\n    activePlace: 0,\n  };\n  \n  render() {\n    const activePlace = this.state.activePlace;\n    return (\n      <div className=\"card\">        \n      \n        {PLACES.map((place, index) => (\n          <button\n            key={index}\n            onClick={() => {\n              this.setState({ activePlace: index });\n            }} >\n              {place}\n          </button>\n        ))}\n\n        <WeatherDisplay \n          key={activePlace}\n          name={PLACES[activePlace]} />\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}